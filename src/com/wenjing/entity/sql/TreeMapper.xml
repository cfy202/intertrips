<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "mybatis-3-mapper.dtd" >
<mapper namespace="com.wenjing.dao.TreeMapper" >
  <cache type="org.mybatis.caches.ehcache.EhcacheCache" />
  <resultMap id="BaseResultMap" type="com.wenjing.entity.Tree" >
    <id column="id" property="id" jdbcType="VARCHAR" />
    <result column="name" property="name" jdbcType="VARCHAR" />
    <result column="parentId" property="parentid" jdbcType="VARCHAR" />
    <result column="pName" property="pname" jdbcType="VARCHAR" />
    <result column="level" property="level" jdbcType="INTEGER" />
    <result column="url" property="url" jdbcType="VARCHAR" />
    <result column="orderId" property="orderid" jdbcType="INTEGER" />
    <result column="opationNames" property="opationNames" jdbcType="VARCHAR" />
    <result column="opationIds" property="opationIds" jdbcType="VARCHAR" />
    <result column="sonmaxsort" property="sonmaxsort" jdbcType="INTEGER" />
    <!-- <collection property="roletreesParentid" ofType="com.wenjing.entity.Roletree" column="id" select="com.wenjing.dao.RoletreeMapper.selectByParentid" /> -->
  </resultMap>
  <sql id="Base_Column_List" >
    id, `name`, parentId,pName,level, url, orderId,opationNames, opationIds, sonmaxsort
  </sql>
  
  <sql id="Base_Column_List1" >
    tree.id, `name`, parentId, url, orderId, roletree.opationIds as opationIds
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.String" >
    select 
    <include refid="Base_Column_List" />
    from tree
    where id = #{id,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String" flushCache="true" >
    delete from tree
    where id = #{id,jdbcType=VARCHAR}
  </delete>
  <insert id="insert" parameterType="com.wenjing.entity.Tree" flushCache="true" >
    insert into tree (id, `name`, parentId,pName,level, 
      url, orderId, opationNames, opationIds, sonmaxsort)
    values (#{id,jdbcType=VARCHAR}, #{name,jdbcType=VARCHAR}, #{parentid,jdbcType=VARCHAR}, 
    #{pname,jdbcType=VARCHAR},#{level,jdbcType=INTEGER},#{url,jdbcType=VARCHAR}, 
    #{orderid,jdbcType=INTEGER},#{opationNames,jdbcType=VARCHAR},#{opationIds,jdbcType=VARCHAR},#{sonmaxsort,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.wenjing.entity.Tree" flushCache="true" >
    insert into tree
    <trim prefix="(" suffix=")" suffixOverrides="," >
      id,
      `name`,
      parentId,
      pName,
      level,
      url,
      orderId,
      opationNames,
      opationIds,
      sonmaxsort,
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      #{id,jdbcType=VARCHAR},
      #{name,jdbcType=VARCHAR},
      #{parentid,jdbcType=VARCHAR},
      #{pname,jdbcType=VARCHAR},
      #{level,jdbcType=INTEGER},
      #{url,jdbcType=VARCHAR},
      #{orderid,jdbcType=INTEGER},
      #{opationNames,jdbcType=VARCHAR},
      #{opationIds,jdbcType=VARCHAR},
      #{sonmaxsort,jdbcType=INTEGER},
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.wenjing.entity.Tree" flushCache="true" >
    update tree
    <set >
      <if test="name != null" >
        `name` = #{name,jdbcType=VARCHAR},
      </if>
      <if test="parentid != null" >
        parentId = #{parentid,jdbcType=VARCHAR},
      </if>
      <if test="pname != null" >
        pName = #{pname,jdbcType=VARCHAR},
      </if>
      <if test="level != null" >
        level = #{level,jdbcType=INTEGER},
      </if>
      <if test="url != null" >
        url = #{url,jdbcType=VARCHAR},
      </if>
      <if test="orderid != null" >
        orderId = #{orderid,jdbcType=INTEGER},
      </if>
      <if test="opationNames != null" >
        opationNames = #{opationNames,jdbcType=VARCHAR},
      </if>
      <if test="opationIds != null" >
        opationIds = #{opationIds,jdbcType=VARCHAR},
      </if>
       <if test="sonmaxsort != null" >
        sonmaxsort = #{sonmaxsort,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.wenjing.entity.Tree" flushCache="true" >
    update tree
    set `name` = #{name,jdbcType=VARCHAR},
      parentId = #{parentid,jdbcType=VARCHAR},
      pName = #{pname,jdbcType=VARCHAR},
      level = #{level,jdbcType=INTEGER},
      url = #{url,jdbcType=VARCHAR},
      orderId = #{orderid,jdbcType=INTEGER},
      opationNames = #{opationNames,jdbcType=VARCHAR},
      opationIds = #{opationIds,jdbcType=VARCHAR},
      sonmaxsort = #{sonmaxsort,jdbcType=INTEGER}
    where id = #{id,jdbcType=VARCHAR}
  </update>
  <!-- findaLL -->
  	<select id="findAll" resultMap="BaseResultMap" >
  	 select * from tree order by orderId
  	</select>
  <!-- findaLL -->
  	<select id="findAllByRole" resultMap="BaseResultMap" parameterType="java.lang.String" >
  	 select <include refid="Base_Column_List1" /> from tree,roletree where treeId = tree.id and roleId = #{roleId,jdbcType=VARCHAR} order by orderId
  	</select>
  <!-- findaLLbyparent  fred 2015-5-6 -->
  	<select id="findAllByParent" resultMap="BaseResultMap" >
  	 select * from tree order by orderId
  	</select>
  <!-- find parentid maxorder  fred 2015-5-6 -->	
 <select id="getParentMaxSort" resultType="java.lang.Integer">
     select ifnull(max(orderId),0) from tree where parentId = #{parentId,jdbcType=VARCHAR}      
  </select> 
  <!-- 查询总记录数 -->	
  <select id="getMaxSort" resultType="java.lang.Integer">
     select ifnull(max(orderId),0) from tree     
  </select>
  
   <!-- 查询upid相同的sort最大值 -->
  <select id="getMaxSortByUpId" resultType="java.lang.Integer" parameterType="java.lang.String">
     select ifnull(max(orderId),0) from tree where parentId=#{upid,jdbcType=VARCHAR}
  </select>
  
  <!-- 根据sort查询 -->
  <select id="getIdBySort" resultMap="BaseResultMap" parameterType="java.lang.Integer">
     select * from tree where orderId = #{sort}
  </select>
  
  <!-- 更新排序号,所有排序号>maxSort的sort+1 -->
   <update id="updateSort" flushCache="true">
     update tree set orderId = orderId <![CDATA[+]]> 1 where orderId > #{sonmaxsort,jdbcType=INTEGER}
  </update>
  
  <!-- 更儿子最大排序号 -->
   <update id="updateSonMaxSort" flushCache="true">
     update tree set sonmaxsort = #{sort,jdbcType=INTEGER}
  </update>
  
   <!-- 修改儿子的级别-->
   <update id="updateSonLevel" flushCache="true">
     update tree set level = #{a} where orderId between #{start} and #{end}
  </update>
  
   <!-- 第一个儿子到最后一个儿子的sort-(oldsort-新sort)-->
   <update id="updateSonSort" flushCache="true">
     update tree set orderId = orderId <![CDATA[-]]> #{a}, sonmaxsort = 1 where orderId between #{start} and #{end} and sonmaxsort<![CDATA[<>]]>1
  </update>
  
  <!-- 修改后新sort之后的到oldsort之间的sort+(oldsort-新sort)-->
   <update id="updateNewSortBack" flushCache="true">
     update tree set orderId = orderId <![CDATA[+]]> #{a}, sonmaxsort = 1 where orderId between #{start} and #{end} and sonmaxsort<![CDATA[<>]]>1
  </update>
  
  <!-- 删除所有的儿子 -->
   <delete id="deleteAllSon" flushCache="true" >
    delete from tree where orderId between #{start} and #{end}
  </delete>
  
   <!-- 删除后更新序号 -->
  <update id="updateDeleteSort" flushCache="true">
     update tree set orderId = orderId <![CDATA[-]]> #{a} where orderId > #{sort,jdbcType=INTEGER}
  </update>
  
  <!-- 查询不等于此orderid的所有 -->
  <select id="findNotContainSelf" parameterType="java.lang.Integer" resultMap="BaseResultMap" >
  	 select * from tree where orderId <![CDATA[<>]]> #{orderid} ORDER BY orderId
  </select>
  
  <!-- 查询不等于此orderid和其所有儿子的所有 -->
  <select id="findNotContainSelfAndSon" parameterType="java.lang.Integer" resultMap="BaseResultMap" >
  	 select * from tree where orderId not BETWEEN #{start} and #{end} ORDER BY orderId;
  </select>
</mapper>